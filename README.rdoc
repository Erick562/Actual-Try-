== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.


               JUST GOING TO BE NOTES

    GIT INFO 
    to setup the details we put 
    git config --global user.name "Whatever name"
    git config --global user.email "gracianerick@yahoo.com"

    git config --list will give you all the info 

    git init then  starts up git 


    git add -A starts to track all of the files 

    git status then shows you all of the files


    git commit -m "message"  then allows you to commit all of the changes with a message that you can add

    the gitignore file shows everything that git ignores

    rm -rf "insert file" is a git commmand that deletes any file that you insert 

    git checkout -f undoes all of the changes that you made to the project


     cat ~/.ssh/id_rsa.pub , this command will display your unique ssh key 

     a next step for when entering in the github 
     1. add the ssh key 
     2. then name and save and also grab the command under the 'or push an existing repository from the command line' line 

     in this case the command was 'git remote add origin git@github.com:Erick562/Actual-Try-.git' 
     to check if the command was recieved tpye in 'git remote -v ' into the command line 

     then i typed in 'git push -u origin master' to finish it off

     finally the tada! moment is that 'git push' is the ultimate command that pushes everything to the reposirty 


      OK ONTO A MIGRATION FILE FACT 
      when you mess up and forget to have a feature on a table like description.text 
      you instead make another table called add_description_to_ect 
      and inside you put 'add_column :articles, :description, :text'
      as you may notice first the location then the name and last the type 
      of object that it is 


      ALSO 
      the schema.rb holds all of the tables that you have created 

      models inheret from ActiveRecord::Base 


      you add validations in the models 
      you can validate the lenght, presence etc 
      validations look a little something like ... 

      validates :title, precense: true, length: { minimum: 20, maximum: 30}  
      the hash at the end is seperated by "key:value" and you use it when you want to add info that isn't 
      going to change according to the book 

      UI stands for User INterface which means when you puth the code that allows the user to interact with the database 


      just a little quick overview of what i just learned that we have been struggling in ..

      when you create a  new form that a user will submit you direct it to the new controller 
      and then when the user clicks submit it gets directed to the create controller 

      so the create controller is going to have to take the attributes of the title and description nd whitelist them 
      which was introduced in rails 4 and once they are whitelisted the create action is going to have to create a new instance variable 
      with the article and description values and then its going to see the validations and if it passes the validations then it is going to hit the database but if it doesnt pass the validations then it will flash an error message within the same controller and then redirect 

        TYING THE VIEW FILES TO THE MODELS SO THAT DATA CAN BE TRANSFERRED( WHAT I HAVE BEEN STRUGGLING WITH THE MOST)

        ok so "form_helpers" are provided by rails and are blocks that create forms and in those form transfer data 

        remember that when you create a model you also create a corresponding controller that reacts by naminf convention so as 
        long as you name the controller correctly then your good 

        and in the controller you put a new action which responds to a new view where we put 

        "form_for @whatever" which transefers the instance variable that you have to define in the new action 
        across the block of code

        the create action does not require a template 

        from what ive read the "params" arg whitelist the instance of an instance variable

        when you rake routes certain routes ask for the id which meand to pass in the params and attributes which usaully comes in the form of an instance variable


        i used a code block to get all the error messages and then displayed them in a list manner 

        Routing options are passed in the :url hash

        HTML options are passed in the :html hash

        the forms in rails that take data to the database require authenticity tokens, since i realized that the form helers create
        html for the tags and they wont let you sumbit without the security token

        never iunderestiimate the intellegince of ruby on rails, when you created the edit page, rails automatically prefilles the 
        boxes with the article you asked for and relabeled the submit button into update article which is actually pretty trippy xD


        apparnetly you can name the article instance variables slightly differntly on every action, since steve did it in udemy 
        but research into it more...


        YEAH!! is sloved an error on the index page on line 14 <td><%= link_to 'edit', edit_article_path(article) %> by passing in the article when it asked that it needed the key to be passed in..


        you can also reduce repetition by defining a method like find params id etc.. and include it to avoid uneccessaryly long code BUT another way to do that is to write ..
        before_action :set_article, only: [:edit, :update, :show, :destroy]

        kinda skipping alot of the styling videos

        apparenetly from what i saw the body tag determines the color of the whole page overall
#
#
#
#
#